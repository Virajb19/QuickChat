generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum OauthProvider {
    GOOGLE
    GITHUB
}

model User {
    id            Int       @id @default(autoincrement())
    username      String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    password      String?

    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    lastLogin      DateTime @default(now())
    ProfilePicture String?  @default("")

    OauthProvider OauthProvider?
    OauthId       String?

    createdChats Chat[]
    chats        ChatParticipant[]
    sentMessages Message[]

    accounts Account[]
    sessions Session[]
}

model Chat {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title    String
    passcode String 

    ownerId Int
    owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

    participants ChatParticipant[]
    messages     Message[]
}

model ChatParticipant {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    joinedAt DateTime  @default(now())
    leftAt   DateTime?

    userId Int
    user   User @relation(fields: [userId], references: [id])

    chatId String
    Chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

    @@unique([userId, chatId])
}

model Message {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    content String

    chatId String
    Chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

    senderId Int
    sender   User @relation(fields: [senderId], references: [id])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   Int
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
